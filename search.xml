<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>边缘检测</title>
    <url>/2019/CNN01/</url>
    <content><![CDATA[<p class="description"></p>

<span id="more"></span>

<h2 id="卷积计算方法"><a href="#卷积计算方法" class="headerlink" title="卷积计算方法"></a>卷积计算方法</h2><h3 id="卷积计算方法示意"><a href="#卷积计算方法示意" class="headerlink" title="卷积计算方法示意"></a>卷积计算方法示意</h3><p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g288zo2mgyg30hs0cw0vc.gif" alt="cnn001_001" title="卷积计算示意图"></p>
<h3 id="卷积计算示例"><a href="#卷积计算示例" class="headerlink" title="卷积计算示例"></a>卷积计算示例</h3><p>$$<br>\begin{bmatrix}<br>3&amp;3&amp;2&amp;1&amp;0\<br>0&amp;0&amp;1&amp;3&amp;1\<br>3&amp;1&amp;2&amp;2&amp;3\<br>2&amp;0&amp;0&amp;2&amp;2\<br>2&amp;0&amp;0&amp;0&amp;1\<br>\end{bmatrix} *<br>\begin{bmatrix}<br>0&amp;1&amp;2\<br>2&amp;2&amp;0\<br>0&amp;1&amp;2\<br>\end{bmatrix} &#x3D;<br>\begin{bmatrix}<br>12&amp;12&amp;17\<br>10&amp;17&amp;19\<br>9&amp;6&amp;14\<br>\end{bmatrix}<br>$$</p>
<p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g2895dhdllg30ev08b0x5.gif" alt="cnn001_002" title="卷积计算示例"></p>
<h2 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h2><h3 id="垂直边缘检测"><a href="#垂直边缘检测" class="headerlink" title="垂直边缘检测"></a>垂直边缘检测</h3><p>$$<br>\begin{bmatrix}<br>10&amp;10&amp;10&amp;0&amp;0&amp;0\<br>10&amp;10&amp;10&amp;0&amp;0&amp;0\<br>10&amp;10&amp;10&amp;0&amp;0&amp;0\<br>10&amp;10&amp;10&amp;0&amp;0&amp;0\<br>10&amp;10&amp;10&amp;0&amp;0&amp;0\<br>10&amp;10&amp;10&amp;0&amp;0&amp;0\<br>\end{bmatrix} *<br>\begin{bmatrix}<br>1&amp;0&amp;-1\<br>1&amp;0&amp;-1\<br>1&amp;0&amp;-1\<br>\end{bmatrix} &#x3D;<br>\begin{bmatrix}<br>0&amp;30&amp;30&amp;0\<br>0&amp;30&amp;30&amp;0\<br>0&amp;30&amp;30&amp;0\<br>0&amp;30&amp;30&amp;0\<br>\end{bmatrix}<br>$$</p>
<p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g2cd536jdlj30gt04ia9w.jpg" alt="cnn001_003" title="边缘检测示意图"></p>
<h3 id="边缘过渡"><a href="#边缘过渡" class="headerlink" title="边缘过渡"></a>边缘过渡</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote>
<p>取绝对值可以忽略过度<br>不取绝对值，可以得到过度信息</p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g2ckkpd2i8j30mi0lk0u1.jpg" alt="cnn001_004" title="边缘过度"></p>
<h4 id="水平检测"><a href="#水平检测" class="headerlink" title="水平检测"></a>水平检测</h4><p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g2clajy42zj30fc05vdhb.jpg" alt="cnn001_005" title="水平边缘检测"></p>
<h3 id="滤波器种类"><a href="#滤波器种类" class="headerlink" title="滤波器种类"></a>滤波器种类</h3><p>$$\begin{bmatrix}<br>1&amp;0&amp;-1\<br>2&amp;0&amp;-2\<br>1&amp;0&amp;-1\<br>\end{bmatrix}\ \ \ \ \ \ \<br>\begin{bmatrix}<br>3&amp;0&amp;-3\<br>10&amp;0&amp;-10\<br>3&amp;0&amp;-3\<br>\end{bmatrix}\ \ \ \ \ \ \<br>\begin{bmatrix}<br>\omega _1&amp;\omega _2&amp;\omega _3\<br>\omega _4&amp;\omega _5&amp;\omega _6\<br>\omega _7&amp;\omega _8&amp;\omega _9\<br>\end{bmatrix}<br>$$</p>
<center>

<p><b>sobe fitter &amp;emsp; &amp;emsp; &amp;emsp; &amp;emsp;  scharr fitter  &amp;emsp; &amp;emsp; &amp;emsp; &amp;emsp;  训练滤波器</b></p>
</center>

<hr/>]]></content>
      <categories>
        <category>CNN</category>
      </categories>
      <tags>
        <tag>图像</tag>
        <tag>边缘检测</tag>
        <tag>卷积</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow笔记（第一讲）</title>
    <url>/2019/Tensorflow01/</url>
    <content><![CDATA[<div class="note info">
人工智能概述
</div>
<span id="more"></span>


<h2 id="人工智能-vs-机器学习-vs-深度学习"><a href="#人工智能-vs-机器学习-vs-深度学习" class="headerlink" title="人工智能 vs 机器学习 vs 深度学习"></a>人工智能 vs 机器学习 vs 深度学习</h2><p>人工智能，机器模拟人的意识和思维；<br>机器学习，实现人工智能的一种方法，是人工智能的子集。<br>深度学习，是深层次神经网络，是机器学习的一种实现方法，是机器学习的子集。</p>
<p><img src="https://ws1.sinaimg.cn/large/0065saiygy1g4sq6fgcctj308z08n74b.jpg" alt="tensenflower002.jpg" title="人工智能、机器学习和深度学习的关系"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>机器学习的定义：如果一个程序可在任务T上，随经验E的增加，效果P随之增加，则这个程序可以从经验中学习。<br><img src="https://ws1.sinaimg.cn/large/0065saiygy1g4sqb7rq5gj30gv06n74c.jpg" alt="tensenflower003.jpg" title="机器学习过程"></p>
<p><img src="https://ws1.sinaimg.cn/large/0065saiygy1g4sqb7oyxoj30dl07xwee.jpg" alt="tensenflower004.jpg" title="单个神经元"></p>
<hr />]]></content>
      <categories>
        <category>Tensorflow</category>
      </categories>
      <tags>
        <tag>MOOC</tag>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow笔记（第二讲）</title>
    <url>/2019/Tensorflow02/</url>
    <content><![CDATA[<div class="note info">
Tensorflow框架
</div>

<span id="more"></span>

<h2 id="张量、计算图、会话"><a href="#张量、计算图、会话" class="headerlink" title="张量、计算图、会话"></a>张量、计算图、会话</h2><p>基于Tensorflow的NN：用张量表示数据，用计算图搭建神经网络，用会话执行计算图，优化线上的权重（参数），得到模型。</p>
<h3 id="张量-tensor"><a href="#张量-tensor" class="headerlink" title="张量 (tensor)"></a>张量 (tensor)</h3><ul>
<li>多维数组（列表），可表示 0~n 阶数组</li>
<li>阶：张量的维数</li>
</ul>
<table>
<thead>
<tr>
<th>维数</th>
<th>阶</th>
<th>名字</th>
<th align="center">例子</th>
</tr>
</thead>
<tbody><tr>
<td>0-D</td>
<td>0</td>
<td>标量 scalar</td>
<td align="center"><code>s = 1 </code></td>
</tr>
<tr>
<td>1-D</td>
<td>1</td>
<td>向量 vector</td>
<td align="center"><code>v = [1, 2, 3]</code></td>
</tr>
<tr>
<td>2-D</td>
<td>2</td>
<td>矩阵 matrix</td>
<td align="center"><code>m = [[1, 2, 3], [4, 5, 6]]</code></td>
</tr>
<tr>
<td>n-D</td>
<td>n</td>
<td>张量 tensor</td>
<td align="center">$t&#x3D; \underbrace{[ [ [ }_{n个}\cdots$</td>
</tr>
</tbody></table>
<figure class="highlight python"><figcaption><span>python2</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">a = tf.constant([<span class="number">1.0</span>, <span class="number">2.0</span>])</span><br><span class="line">b = tf.constant([<span class="number">3.0</span>, <span class="number">4.0</span>])</span><br><span class="line">reuslt = a + b</span><br><span class="line"><span class="built_in">print</span> result </span><br><span class="line"></span><br><span class="line"><span class="comment"># Tensor(&quot;add:0&quot;, shape=(2,), dtype=float32)</span></span><br></pre></td></tr></table></figure>

<h3 id="计算图-graph"><a href="#计算图-graph" class="headerlink" title="计算图 (graph)"></a>计算图 (graph)</h3><ul>
<li>搭建神经网络的计算过程，只搭建，不运算<br><img src="https://ws1.sinaimg.cn/large/0065saiygy1g4ss815wf7j30jd07fdg4.jpg" alt="tensenflower005.jpg" title="计算图"></li>
</ul>
<h3 id="会话-Session"><a href="#会话-Session" class="headerlink" title="会话(Session)"></a>会话(Session)</h3><ul>
<li>执行计算图中的节点运算</li>
</ul>
<figure class="highlight python"><figcaption><span>python2</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">a = tf.constant([<span class="number">1.0</span>, <span class="number">2.0</span>])</span><br><span class="line">w = tf.constant([<span class="number">3.0</span>, <span class="number">4.0</span>])</span><br><span class="line">y = tf.matmul(x,w)</span><br><span class="line"><span class="built_in">print</span> y</span><br><span class="line"><span class="comment"># Tensor(&quot;matmul:0&quot;, shape(1,1), dtype=float32)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span> sess.run(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[11.]]</span></span><br></pre></td></tr></table></figure>

<h2 id="神经网络实现过程"><a href="#神经网络实现过程" class="headerlink" title="神经网络实现过程"></a>神经网络实现过程</h2><blockquote>
<ol>
<li>准备数据集，提取特征，作为输入喂给神经网络</li>
<li>搭建NN结构，从输入到输出（先搭建计算图，再用会话执行）<br>  （NN前向传播算法 $\Rightarrow$ 计算输出）</li>
<li>大量特征数据喂给NN，迭代优化NN参数<br>  （NN反向传播算法 $\Rightarrow$ 优化参数训练模型）</li>
<li>使用训练好的模型预测和分类</li>
</ol>
</blockquote>
<h2 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li>权重W, 用变量表示，随机给初值<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># W 随机生成方法</span></span><br><span class="line"></span><br><span class="line">w = tf.Variable(tf.random_normal([<span class="number">2</span>,<span class="number">3</span>], stddev = <span class="number">2</span>, mean = <span class="number">0</span>, seed = <span class="number">1</span>))</span><br><span class="line"><span class="comment"># tf.random_normal 正态分布 </span></span><br><span class="line"><span class="comment"># [2,3] 2*3矩阵</span></span><br><span class="line"><span class="comment"># stddev 标准差</span></span><br><span class="line"><span class="comment"># mean 均值</span></span><br><span class="line"><span class="comment"># seed 随机种子 随机种子相同，生成的随机数相同</span></span><br></pre></td></tr></table></figure></li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
<th align="center">示例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td><code>tf.truncated_normal()</code></td>
<td>去过大偏离点的正态分布</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
<tr>
<td><code>tf.random_uniform()</code></td>
<td>均匀分布</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
<tr>
<td><code>tf.zeros()</code></td>
<td>全0 数组</td>
<td align="center"><code>tf.zeros([3,2], int32)</code></td>
<td align="center"><code>[[0, 0], [0, 0], [0, 0]]</code></td>
</tr>
<tr>
<td><code>tf.ones()</code></td>
<td>全1 数组</td>
<td align="center"><code>tf.ones([3,2], int32)</code></td>
<td align="center"><code>[[1, 1], [1, 1], [1, 1]]</code></td>
</tr>
<tr>
<td><code>tf.fill()</code></td>
<td>全定值数组</td>
<td align="center"><code>tf.fill([3,2], 6)</code></td>
<td align="center"><code>[[6, 6], [6, 6], [6, 6]]</code></td>
</tr>
<tr>
<td><code>tf.constant()</code></td>
<td>直接给值</td>
<td align="center"><code>tf.constant([3, 2, 1])</code></td>
<td align="center"><code>[3, 2, 1]</code></td>
</tr>
</tbody></table>
<h3 id="前向传播-1"><a href="#前向传播-1" class="headerlink" title="前向传播"></a>前向传播</h3><ul>
<li>搭建模型，实现推理</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/0065saiyly1g4tdq6lu5gj30t80bdjsb.jpg" alt="tensenflower006.jpg" title="前向传播示例"></p>
<ul>
<li>$X$ 是输入为 $1×2$ 矩阵</li>
<li>$ w^{(k)}_{i,j} $ 为待优化参数：$ i $ 为前节点编号、 $ j $ 后节点编号、 $ k $ 层数</li>
</ul>
<p>$$<br>W^{(1)} &#x3D;<br>\begin{bmatrix}<br>    w^{(1)}<em>{1,1} &amp; w^{(1)}</em>{1,2} &amp; w^{(1)}<em>{1,3} \<br>    w^{(1)}</em>{2,1} &amp; w^{(1)}<em>{2,2} &amp; w^{(1)}</em>{2,3} \<br>\end{bmatrix}<br>$$</p>
<p>$$ a^{(1)} &#x3D;[a_{11}, a_{12},a_{13}] &#x3D; XW^{(1)} $$</p>
<p>$$<br>W^{(2)} &#x3D;<br>\begin{bmatrix}<br>    w^{(2)}<em>{1,1} \<br>    w^{(2)}</em>{2,1} \<br>    w^{(2)}_{3,1} \<br>\end{bmatrix}<br>$$</p>
<p>$$ y&#x3D;a^{(1)}W^{(1)} $$ </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = tf.matmul(X, W1)</span><br><span class="line">y = tf.matmul(a, W2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量初始化、计算图节点运，算都要用会话（with结构）实现</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有变量初始化：在sess.run函数中用tf.global_variables_initializer()</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    init_op = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init_op)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算图节点运算：在sess.run函数中写入待运算的节点</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用tf.placeholder占位，在sess.run函数中用feed_dict喂数据</span></span><br><span class="line"><span class="comment"># 喂一组数据：</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape = (<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(y, feed_dic = &#123;x: [[<span class="number">0.5</span>, <span class="number">0.6</span>]]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 喂多组数据：</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape = (<span class="literal">None</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(y, feed_dic = &#123;x: [[<span class="number">0.1</span>, <span class="number">0.2</span>], [<span class="number">0.2</span>, <span class="number">0.3</span>], [<span class="number">0.3</span>, <span class="number">0.4</span>], [<span class="number">0.4</span>, <span class="number">0.5</span>]]&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>python2  example1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 两层简单神经网络（全连接）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入和参数</span></span><br><span class="line">x = tf.constant([[<span class="number">0.7</span>, <span class="number">0.5</span>]])</span><br><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>, <span class="number">3</span>], stddev = <span class="number">1</span>, seed = <span class="number">1</span>))</span><br><span class="line">w2 = tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">1</span>], stddev = <span class="number">1</span>, seed = <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义前向传播</span></span><br><span class="line">a = tf.matmul(x, w1)</span><br><span class="line">y = tf.matmul(a, w2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用会话计算结果</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    init_op = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    ptint <span class="string">&quot;y is: &quot;</span>,sess.run(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y is [[3.0904665]]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>python2  example2</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 两层简单神经网络（全连接）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入和参数</span></span><br><span class="line"><span class="comment"># 用placeholder 实现输入定义（sess.run 中喂一组数据）</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape = (<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>, <span class="number">3</span>], stddev = <span class="number">1</span>, seed = <span class="number">1</span>))</span><br><span class="line">w2 = tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">1</span>], stddev = <span class="number">1</span>, seed = <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义前向传播</span></span><br><span class="line">a = tf.matmul(x, w1)</span><br><span class="line">y = tf.matmul(a, w2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用会话计算结果</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    init_op = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    ptint <span class="string">&quot;y is: &quot;</span>,sess.run(y, feed_dict = &#123;x: [[<span class="number">0.7</span>, <span class="number">0.5</span>]]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y is [[3.0904665]]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>python2  example3</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 两层简单神经网络（全连接）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入和参数</span></span><br><span class="line"><span class="comment"># 用placeholder 实现输入定义（sess.run 中喂多组数据）</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape = (<span class="literal">None</span>, <span class="number">2</span>))</span><br><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>, <span class="number">3</span>], stddev = <span class="number">1</span>, seed = <span class="number">1</span>))</span><br><span class="line">w2 = tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">1</span>], stddev = <span class="number">1</span>, seed = <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义前向传播</span></span><br><span class="line">a = tf.matmul(x, w1)</span><br><span class="line">y = tf.matmul(a, w2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用会话计算结果</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    init_op = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    ptint <span class="string">&quot;y is: \n&quot;</span>,sess.run(y, feed_dict = &#123;x: [[<span class="number">0.7</span>, <span class="number">0.5</span>], [<span class="number">0.2</span>, <span class="number">0.3</span>], [<span class="number">0.3</span>, <span class="number">0.4</span>], [<span class="number">0.4</span>, <span class="number">0.5</span>]]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y is </span></span><br><span class="line"><span class="comment"># [[3.0904665]</span></span><br><span class="line"><span class="comment">#  [1.2236414]</span></span><br><span class="line"><span class="comment">#  [1.72707319]</span></span><br><span class="line"><span class="comment">#  [2.23050475]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2><p>训练模型参数，在所有参数上用梯度下降，使NN 模型在训练数据上的损失函数最小</p>
<h3 id="损失函数-loss"><a href="#损失函数-loss" class="headerlink" title="损失函数(loss)"></a>损失函数(loss)</h3><p>预测值与已知答案的差距<br>均方误差MSE<br>$$ MSE(y_,y) &#x3D; \frac{\sum_{i&#x3D;1}^n(y-y_)^2}{n}$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss = tf.reduce_mean(tf.square(y_ - y))</span><br></pre></td></tr></table></figure>

<p>反向传播训练方法：以减小loss 值为优化目标</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)</span><br><span class="line">train_step = tf.train.MomentumOptimizer(learning_rate, momentum). minimize(loss)</span><br><span class="line">train_step = tf.train.AdamOptimizer(learning_rate).minimize(loss)</span><br></pre></td></tr></table></figure>

<p>学习率：决定参数每次更新幅度 （小一点 0.001）</p>
<figure class="highlight python"><figcaption><span>python2  example4</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 0 导入模块，生成模拟数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">BATCH_SIZE = <span class="number">8</span></span><br><span class="line">seed = <span class="number">23455</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于seed 产生随机数</span></span><br><span class="line">rng = np.random.RandomState(seed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入数据集：随机数返回32行2列的矩阵  表示32组 体重和重量</span></span><br><span class="line">X = rng.rand(<span class="number">32</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入数据标签：从X取出一行，如果和小于1，给Y赋值1； 否则Y赋值0</span></span><br><span class="line">Y = [[<span class="built_in">int</span>(x0 + x1 &lt; <span class="number">1</span>)] <span class="keyword">for</span> (x0, x1) <span class="keyword">in</span> X]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 定义神经网络的输入、参数和输出，定义前向传播过程</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape = (<span class="literal">None</span>, <span class="number">2</span>))</span><br><span class="line">y_ = tf.placeholder(tf.float32, shape = (<span class="literal">None</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>, <span class="number">3</span>], stddev = <span class="number">1</span>, seed = <span class="number">1</span>))</span><br><span class="line">w2 = tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">1</span>], stddev = <span class="number">1</span>, seed = <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">a = tf.matmul(x, w1)</span><br><span class="line">y = tf.matmul(a, w2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 定义损失函数及反向传播方法</span></span><br><span class="line">loss = tf.reduce_mean(tf.square(y - y_))</span><br><span class="line">train_stpe = tf.train.GradientDescentOptimizer(<span class="number">0.001</span>).minimize(loss)</span><br><span class="line"><span class="comment"># train_step = tf.train.MomentumOptimizer(0.001, 0.9). minimize(loss)</span></span><br><span class="line"><span class="comment"># train_step = tf.train.AdamOptimizer(0.001).minimize(loss)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 生成会话，训练STEPS轮</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    init_op = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    <span class="comment"># 输出未训练的参数值</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;w1:\n&quot;</span>, sess.run(w1)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;w2:\n&quot;</span>, sess.run(w2)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    STEPS = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(STEPS):</span><br><span class="line">        start = (i * BATCH_SIZE) % <span class="number">32</span></span><br><span class="line">        end = start + BATCH_SIZE   </span><br><span class="line">        sess.run(train_step, feed_dict = &#123;x: X[start: end], y_: Y[start, end]&#125;)</span><br><span class="line">        <span class="keyword">if</span> i  % <span class="number">500</span> == <span class="number">0</span>:</span><br><span class="line">            total_loss = sess.run(loss, feed_dict = &#123;x: X, y_: Y&#125;)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;After %d training stap(s), loss on all data is %g&quot;</span> % (i, total_loss))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;w1:\n&quot;</span>, sess.run(w1)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;w2:\n&quot;</span>, sess.run(w2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># w1:</span></span><br><span class="line"><span class="comment"># [[-0.81131822   1.48459876  0.06532937]</span></span><br><span class="line"><span class="comment">#  [-2.4427042    0.0992484   0.59122431]]</span></span><br><span class="line"><span class="comment"># w2:</span></span><br><span class="line"><span class="comment"># [[-0.81131822]</span></span><br><span class="line"><span class="comment">#  [ 1.48459876]</span></span><br><span class="line"><span class="comment">#  [ 0.06532937]]</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># After 0 training step(s), loss on all data is 5.13118</span></span><br><span class="line"><span class="comment"># After 500 training step(s), loss on all data is 0.429111</span></span><br><span class="line"><span class="comment"># After 1000 training step(s), loss on all data is 0.409789</span></span><br><span class="line"><span class="comment"># After 1500 training step(s), loss on all data is 0.399923</span></span><br><span class="line"><span class="comment"># After 2000 training step(s), loss on all data is 0.394146</span></span><br><span class="line"><span class="comment"># After 2500 training step(s), loss on all data is 0.390597</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># w1:</span></span><br><span class="line"><span class="comment"># [[-0.70006633   0.9136318   0.08953571]</span></span><br><span class="line"><span class="comment">#  [-2.3402493    -0.14641267 0.58823055]]</span></span><br><span class="line"><span class="comment"># w2:</span></span><br><span class="line"><span class="comment"># [[-0.06024267]</span></span><br><span class="line"><span class="comment">#  [ 0.91956186]</span></span><br><span class="line"><span class="comment">#  [-0.0682071 ]]</span></span><br></pre></td></tr></table></figure>

<h2 id="搭建神经网络步骤"><a href="#搭建神经网络步骤" class="headerlink" title="搭建神经网络步骤"></a>搭建神经网络步骤</h2><p>1 准备</p>
<blockquote>
<p>import<br>常量定义<br>生成数据集</p>
</blockquote>
<p>2 前向传播：定义输入、参数和输出</p>
<blockquote>
<p>x  &#x3D;<br>y_ &#x3D;</p>
<p>w1 &#x3D;<br>w2 &#x3D;</p>
<p>a &#x3D;<br>y &#x3D; </p>
</blockquote>
<p>3 反向传播：定义损失函数、反向传播方法</p>
<blockquote>
<p>loss &#x3D;<br>train_step &#x3D; </p>
</blockquote>
<p>4 生成会话，训练STEPS轮</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    init_op = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    STEPS = </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(STEPS):</span><br><span class="line">        start = </span><br><span class="line">        end = </span><br><span class="line">        sess.run(train_step, feed_dict)</span><br></pre></td></tr></table></figure>


<hr />]]></content>
      <categories>
        <category>Tensorflow</category>
      </categories>
      <tags>
        <tag>MOOC</tag>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络优化</title>
    <url>/2019/Tensorflow03/</url>
    <content><![CDATA[<div class="note info">
 神经网络优化：损失函数、学习率、滑动平均、正则化
</div>

<span id="more"></span>

<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><hr />]]></content>
      <categories>
        <category>Tensorflow</category>
      </categories>
      <tags>
        <tag>MOOC</tag>
        <tag>Tensorflow</tag>
        <tag>损失函数</tag>
        <tag>正则化</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Day2</title>
    <url>/2019/java02/</url>
    <content><![CDATA[<p>java数组</p>
<span id="more"></span>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li>数组是多个相同类型数据的组合，实现对这些数据的统一管理</li>
<li>数组属<strong>引用类型</strong>，数组型数据是对象（Object），数组中的每个元素相当于该对象的成员变量</li>
<li>数组中的元素可以是任何数据类型，包括<code>基本类型</code>和<code>引用类型</code></li>
</ul>
<h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><ol>
<li><p>定义：数组是多个相同类型数据的组合，实现对这些数据的统一管理</p>
</li>
<li><p>一维数组声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// type name []; </span></span><br><span class="line"><span class="type">int</span> myarray1 [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// type[] name; 推荐</span></span><br><span class="line"><span class="type">int</span>[] myarray2;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数组： <code>new</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span>[] scores = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>
<div class="note info">
 type[] varName = null;
 varName = new type[length];
 type[] varName = new type[length];
</div>
</li>
<li><p>引用元素</p>
<blockquote>
<p>通过下标， 下标从0 开始。 通过数组的length属性，获得数组长度</p>
</blockquote>
</li>
<li><p>一旦创建，就被隐式初始化</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>数组元素类型</th>
<th>初始值</th>
</tr>
</thead>
<tbody><tr>
<td>byte、short、int</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>0L</td>
</tr>
<tr>
<td>float</td>
<td>0.0F</td>
</tr>
<tr>
<td>double</td>
<td>0.0D</td>
</tr>
<tr>
<td>char</td>
<td>‘\u0000’(空)</td>
</tr>
<tr>
<td>boolean</td>
<td>False</td>
</tr>
<tr>
<td>引用类型</td>
<td>Null</td>
</tr>
</tbody></table>
<ol start="6">
<li>数组初始化</li>
</ol>
<ul>
<li>动态初始化：先声明，再创建，后用<code>for</code>赋值</li>
<li>静态初始化：创建同时赋值<br><code> int[] k = new int[]&#123;1, 2, 3&#125;;</code></li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><hr />]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java 基础学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 文本文件处理</title>
    <url>/2019/linux01/</url>
    <content><![CDATA[<div class="note info">
Linux 文本文件处理
</div>
<span id="more"></span>

<h2 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h2><ol>
<li><code>more</code>&#x2F;<code>less</code> 逐屏显示文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">more test.txt  <span class="comment"># one file</span></span><br><span class="line">more *.txt     <span class="comment"># many txt file </span></span><br><span class="line"><span class="built_in">ls</span> -l | more   <span class="comment"># no file</span></span><br><span class="line">less test.txt  </span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>more</li>
</ul>
<table>
<thead>
<tr>
<th>输入</th>
<th>动作</th>
</tr>
</thead>
<tbody><tr>
<td>空格</td>
<td>下一屏</td>
</tr>
<tr>
<td>回车</td>
<td>上滚一行</td>
</tr>
<tr>
<td><code>q</code></td>
<td>退出</td>
</tr>
<tr>
<td><code>/pattren</code></td>
<td>搜索指定模式的字符串，模式描述用正则表达式</td>
</tr>
<tr>
<td><code>/</code></td>
<td>继续查找指定模式的字符串</td>
</tr>
<tr>
<td><code>h</code></td>
<td>帮助信息</td>
</tr>
<tr>
<td><code>Ctrl-L</code></td>
<td>屏幕刷新</td>
</tr>
</tbody></table>
<ul>
<li>less<ul>
<li>回退浏览的功能更强</li>
<li>可直接使键盘的上下箭头键，或者j,k，类似vi的光标定位键，以及PgUp， PgDn，Home，End键</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p><code>cat</code>&#x2F;<code>od</code> 列出文件内容</p>
<blockquote>
<p>cat  concatenate:串结，文本格式打印 （选项-n：行号）<br>od   octal dump逐字节打印（-c, -t c, -t x1，-t d1, -t u1选项）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> -n 20 test.txt</span><br><span class="line"><span class="built_in">cat</span> &gt;test1.txt     <span class="comment"># 从stdin获取数据，直到ctrl-d</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">od</span> -t x1 a.dat     <span class="comment"># 十六进制打印</span></span><br><span class="line"><span class="built_in">od</span> -t xi a.dat | more</span><br><span class="line"><span class="built_in">od</span> -c b.file       <span class="comment"># 逐字打印，遇到不可打印字符，打印编码</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>head</code>&#x2F;<code>tail</code> 显示文件的头部或者尾部</p>
<blockquote>
<p>默认只选择10行，-n选项可以选择行数</p>
</blockquote>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">head</span> -n 15 test.txt</span><br><span class="line"><span class="built_in">head</span> -n 15 test1.txt test2.txt |more  <span class="comment"># 显示2个文件各自前15行，共30行</span></span><br><span class="line"><span class="built_in">tail</span> -n 15 test.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">head</span> -n -20 test.txt  <span class="comment"># 去除文件尾部20行，其余算头</span></span><br><span class="line"><span class="built_in">tail</span> -n +20 test.txt  <span class="comment"># 去除文件头部20行，其余算尾</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> -f debug.txt     <span class="comment"># 实时打印文件尾部被追加的内容</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>tee</code> 三通<blockquote>
<p>将从标准输入stdin得到的数据抄送到标准输出stdout显示，同时存入磁盘文件中</p>
</blockquote>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> a.sh</span><br><span class="line"><span class="built_in">echo</span> a</span><br><span class="line"><span class="built_in">echo</span> b</span><br><span class="line"></span><br><span class="line">sh a.sh | <span class="built_in">tee</span> a.log</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> a.log</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><code>wc</code> 字数统计<blockquote>
<p>列出文件中一共有多少行，有多少个单词，多少字符<br>当指定的文件数大于1时，最后还列出一个合计<br>常用选项-l：只列出行计数</p>
</blockquote>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wc</span> test.txt             <span class="comment"># 1 个文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">wc</span> test1.txt test2.txt  <span class="comment"># 多个文件</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># 6  7 13 test1.txt</span></span><br><span class="line"><span class="comment"># 6  7 13 test2.txt</span></span><br><span class="line"><span class="comment"># 12 14 26 total</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">wc</span> -l test1.txt test2.txt</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># 6  test1.txt</span></span><br><span class="line"><span class="comment"># 6  test2.txt</span></span><br><span class="line"><span class="comment"># 12 total</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><code>sort</code> 对文件内容排序<blockquote>
<p>-n选项(Numberic):对于数字按照算术值大小排序，而不是按照字符串比较 规则，例如123与67<br>可以选择行中某一部分作为排序关键字<br>选择升序或降序<br>字符串比较时对字母是否区分大小写<br>内排序外排序等算法参数选择（当数据量较大时，性能调优）</p>
</blockquote>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> text1.txt &gt; text3.txt</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><code>tr</code> 翻译字符<blockquote>
<p><code>tr string1 string2</code><br>把标准输入拷贝到标准输出，string1中出现的字符替换为string2中的对应字符</p>
</blockquote>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> test1.txt</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="comment"># b</span></span><br><span class="line"><span class="comment"># c</span></span><br><span class="line"><span class="comment"># d</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> test1.txt |<span class="built_in">tr</span> <span class="string">&#x27;[abc]&#x27;</span> <span class="string">&#x27;[XYZ]&#x27;</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># X</span></span><br><span class="line"><span class="comment"># Y</span></span><br><span class="line"><span class="comment"># Z</span></span><br><span class="line"><span class="comment"># d</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li><code>nuiq</code> 筛选文件中重复行<br> <code>uniq options</code><br> <code>uniq options input-file</code><br> <code>uniq options input-file output-file</code></li>
</ol>
<blockquote>
<p>重复的行：<strong>紧邻的两行内容相同</strong><br>选项<br>-u （uniqe）只保留没有重复的行<br>-d （duplicated）只保留有重复的行（但只打印一次） 没有以上两个选项，打印没有重复的行和有重复的行（但只打印一次)<br>-c （count）计数同样的行出现几次</p>
</blockquote>
<hr />]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Linux 学习</tag>
        <tag>文本文件处理</tag>
      </tags>
  </entry>
  <entry>
    <title>linux02</title>
    <url>/2019/linux02/</url>
    <content><![CDATA[<div class="note info">
正则表达式
</div>
<span id="more"></span>



<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><ul>
<li>6个元字符 <code>.</code> <code>*</code> <code>[</code> <code>\</code> <code>^</code> <code>$</code> </li>
<li>其他字符与其自身匹配</li>
<li>转义 用 <code>\</code> 转义元字符</li>
</ul>
<h2 id="单字符正则表达式"><a href="#单字符正则表达式" class="headerlink" title="单字符正则表达式"></a>单字符正则表达式</h2><ul>
<li>转义字符 <code>\.</code> <code>\*</code> <code>\[</code> <code>\\</code> <code>\^</code> <code>\$</code></li>
<li>原点 <code>.</code> 匹配任何一个字符</li>
<li></li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><hr />]]></content>
  </entry>
  <entry>
    <title>Markdown写作模板</title>
    <url>/2019/markdown01/</url>
    <content><![CDATA[<p>整理的markdown语法，以及在hexo中的特殊渲染</p>
<span id="more"></span>
<h2 id="markdown-在hexo-中的渲染-1"><a href="#markdown-在hexo-中的渲染-1" class="headerlink" title="markdown 在hexo 中的渲染 [^1]"></a>markdown 在hexo 中的渲染 [^1]</h2><h3 id="主题自带样式-文本居中引用"><a href="#主题自带样式-文本居中引用" class="headerlink" title="主题自带样式 文本居中引用"></a>主题自带样式 文本居中引用</h3><p>效果：</p>
<blockquote class="blockquote-center">
<p>人生乃是一面镜子，<br>从镜子里认识自己，<br>我要称之为头等大事，<br>也只是我们追求的目的！</p>

</blockquote>

<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;</span><br><span class="line">人生乃是一面镜子，</span><br><span class="line">从镜子里认识自己，</span><br><span class="line">我要称之为头等大事， </span><br><span class="line">也只是我们追求的目的！</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="主题自带样式-note-标签"><a href="#主题自带样式-note-标签" class="headerlink" title="主题自带样式 note 标签"></a>主题自带样式 note 标签</h3><div class="note default"><p>default</p></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;note default&quot;&gt;&lt;<span class="selector-tag">p</span>&gt;default&lt;/<span class="selector-tag">p</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<br/>
<div class="note primary"><p>primary</p></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;note primary&quot;&gt;&lt;<span class="selector-tag">p</span>&gt;primary&lt;/<span class="selector-tag">p</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<br/>
<div class="note success"><p>success</p></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;note success&quot;&gt;&lt;<span class="selector-tag">p</span>&gt;success&lt;/<span class="selector-tag">p</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<br/>
<div class="note info"><p>info</p></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;note info&quot;&gt;&lt;<span class="selector-tag">p</span>&gt;info&lt;/<span class="selector-tag">p</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<br/>
<div class="note warning"><p>warning</p></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;note warning&quot;&gt;&lt;<span class="selector-tag">p</span>&gt;warning&lt;/<span class="selector-tag">p</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<br/>
<div class="note danger"><p>danger</p></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;note danger&quot;&gt;&lt;<span class="selector-tag">p</span>&gt;danger&lt;/<span class="selector-tag">p</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<br/>
<div class="note danger no-icon"><p>danger no-icon</p></div>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;note danger no-<span class="attribute">icon</span>&quot;&gt;&lt;<span class="selector-tag">p</span>&gt;danger no-<span class="attribute">icon</span>&lt;/<span class="selector-tag">p</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="主题自带样式-label-标签"><a href="#主题自带样式-label-标签" class="headerlink" title="主题自带样式 label 标签"></a>主题自带样式 label 标签</h3><ul>
<li><mark class="label default">default</mark></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="selector-tag">label</span> default<span class="keyword">@default</span> %&#125;</span><br></pre></td></tr></table></figure>

<br/>
- <mark class="label primary">primary</mark>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="selector-tag">label</span> primary<span class="keyword">@primary</span> %&#125;</span><br></pre></td></tr></table></figure>

<br/>
- <mark class="label success">success</mark>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="selector-tag">label</span> success<span class="keyword">@success</span> %&#125;</span><br></pre></td></tr></table></figure>

<br/>
- <mark class="label info">info</mark>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="selector-tag">label</span> info<span class="keyword">@info</span> %&#125;</span><br></pre></td></tr></table></figure>

<br/>
- <mark class="label warning">warning</mark>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="selector-tag">label</span> warning<span class="keyword">@warning</span> %&#125;</span><br></pre></td></tr></table></figure>

<br/>
- <mark class="label danger">danger</mark>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="selector-tag">label</span> danger<span class="keyword">@danger</span> %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主题自带样式-tabs-标签"><a href="#主题自带样式-tabs-标签" class="headerlink" title="主题自带样式 tabs 标签"></a>主题自带样式 tabs 标签</h3><p>效果</p>
<div class="tabs" id="选项卡"><ul class="nav-tabs"><li class="tab"><a href="#选项卡-1">选项卡 1</a></li><li class="tab active"><a href="#选项卡-2">选项卡 2</a></li><li class="tab"><a href="#选项卡-3">选项卡 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="选项卡-1"><p><strong>这是选项卡 1</strong> 呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈……</p></div><div class="tab-pane active" id="选项卡-2"><p><strong>这是选项卡 2</strong></p></div><div class="tab-pane" id="选项卡-3"><p><strong>这是选项卡 3</strong> 哇，你找到我了！φ(≧ω≦*)♪～</p></div></div></div>

<p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 选项卡, 2 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 1** 呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈……</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 2**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 3** 哇，你找到我了！φ(≧ω≦*)♪～</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主题自带样式-按钮"><a href="#主题自带样式-按钮" class="headerlink" title="主题自带样式 按钮"></a>主题自带样式 按钮</h3><p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% btn https://www.baidu.com, 点击下载百度, download fa-lg fa-fw %&#125;</span><br></pre></td></tr></table></figure>
<p>效果</p>
<a class="btn" href="https://www.baidu.com"><i class="fa fa-download fa-lg fa-fw"></i>点击下载百度</a>

<h3 id="自定义样式-引用"><a href="#自定义样式-引用" class="headerlink" title="自定义样式 引用"></a>自定义样式 引用</h3><div class="note info"><p>首先由于是自定义的样式，故要自己将 CSS 代码加到custom.styl中，下文的自定义样式都是如此。为什么可以自定义呢？如果你是一个和我一样的小白，可以点击这里了解了解 CSS 中id和class的知识。</p></div>

<p>需加入custom.styl的代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 自定义的引用样式</span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-class">.question</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">4px</span> solid <span class="built_in">rgb</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">227</span>, <span class="number">242</span>, <span class="number">253</span>);</span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>文字颜色改color的值</li>
<li>背景色改background-color的值</li>
<li>边框颜色和粗细改border-left的值</li>
</ul>
<h2 id="markdown-格式"><a href="#markdown-格式" class="headerlink" title="markdown 格式"></a>markdown 格式</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">...</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<p>效果：<br><img src="http://ww1.sinaimg.cn/large/0065saiygy1g1799tc2g8j30gb04mmx0.jpg"></p>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**粗体** </span><br><span class="line">*斜体*  </span><br><span class="line">***斜体加粗*** </span><br><span class="line">~~删除线~~ </span><br><span class="line">&lt;font color =&quot;red&quot;&gt;示例md代码:&lt;/font&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>粗体</strong> </li>
<li><em>斜体</em>  </li>
<li><em><strong>斜体加粗</strong></em> </li>
<li><del>删除线</del> </li>
<li><font color ="red">示例md代码:</font></li>
</ul>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 引用1</span><br><span class="line">&gt;&gt; 引用2</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p>引用1</p>
<blockquote>
<p>引用2</p>
</blockquote>
</blockquote>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">---</span><br><span class="line">***</span><br><span class="line">***</span><br></pre></td></tr></table></figure>
<hr>
<hr>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![alt](url &#x27;&#x27;title&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">alt表示图片显示失败时的替换文本</span><br><span class="line">title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure>
<p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&fm=27&gp=0.jpg" alt="pic1" title="区块链"></p>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line"></span><br><span class="line">title可加可不加</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">[简书](http://jianshu.com)</span><br><span class="line">[百度](http://baidu.com &quot;到百度&quot;)</span><br></pre></td></tr></table></figure>
<p><a href="http://jianshu.com/">简书</a><br><a href="http://baidu.com/" title="到百度">百度</a></p>
<p>html语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">&lt;a href=&quot;https://www.jianshu.com&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com" target="_blank">简书</a></p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<ul>
<li>列表1-</li>
<li>列表2-</li>
</ul>
<ul>
<li>列表1+</li>
<li>列表2+</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数字加点</span><br><span class="line"></span><br><span class="line">1.列表内容</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">上一级和下一级之间敲三个空格即可</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 一级无序</span><br><span class="line">   - 二级无序</span><br><span class="line">   - 二级无序</span><br><span class="line">- 一级无序</span><br><span class="line">   1. 二级有序</span><br><span class="line">   2. 二级有序</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g179t1gt8cj30eo04j3yd.jpg"></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>
<p>在线生成HTML代码 <a href="http://www.tablesgenerator.com/" title="国外">Tables Generator</a></p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g179vkbegbj30c804yjra.jpg"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单行代码:</span><br><span class="line">`int a;`</span><br></pre></td></tr></table></figure>
<p><code>int a;</code></p>
<p>代码块<br><img src="http://ww1.sinaimg.cn/large/0065saiygy1g17a0kot6hj30bq03cq2r.jpg"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    a = a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g17a3role7j30da08zjrt.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start|past:&gt;http://www.google.com[blank]</span><br><span class="line">e=&gt;end: End:&gt;http://www.google.com</span><br><span class="line">op1=&gt;operation: My Operation|past</span><br><span class="line">op2=&gt;operation: Stuff|current </span><br><span class="line">sub1=&gt;subroutine: My Subroutine|invalid</span><br><span class="line">cond=&gt;condition: Yes</span><br><span class="line">or No?|approved:&gt;http://www.google.com</span><br><span class="line">c2=&gt;condition: Good idea|rejected</span><br><span class="line">io=&gt;inputoutput: catch something...|request</span><br><span class="line"></span><br><span class="line">st-&gt;op1(right)-&gt;cond</span><br><span class="line">cond(yes, right)-&gt;c2</span><br><span class="line">cond(no)-&gt;sub1(left)-&gt;op1</span><br><span class="line">c2(yes)-&gt;io-&gt;e</span><br><span class="line">c2(no)-&gt;op2-&gt;e</span><br></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th>6种类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>start</td>
<td>启动</td>
</tr>
<tr>
<td>end</td>
<td>结束</td>
</tr>
<tr>
<td>operation</td>
<td>程序</td>
</tr>
<tr>
<td>subroutine</td>
<td>子程序</td>
</tr>
<tr>
<td>condition</td>
<td>条件</td>
</tr>
<tr>
<td>inputoutput</td>
<td>输出</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>形参</th>
<th>实参</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-&gt;</td>
<td>-&gt;</td>
<td>连接</td>
</tr>
<tr>
<td>condition</td>
<td>c1</td>
<td>条件</td>
</tr>
<tr>
<td>(布尔值,方向)</td>
<td>(yes,right)</td>
<td>如果满足向右连接，4种方向：right ，left，up ，down   默认为：down</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>形参</th>
<th>实参</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>tag</td>
<td>st</td>
<td>标签 (可以自定义)</td>
</tr>
<tr>
<td>&#x3D;&gt;</td>
<td>&#x3D;&gt;</td>
<td>赋值</td>
</tr>
<tr>
<td>type</td>
<td>start</td>
<td>类型 (6种类型)</td>
</tr>
<tr>
<td>content</td>
<td>开始</td>
<td>描述内容 (可以自定义)</td>
</tr>
<tr>
<td>:&gt;url</td>
<td><a href="http://www.baidu.com[blank]">http://www.baidu.com[blank]</a></td>
<td>链接与跳转方式 兼容性很差</td>
</tr>
</tbody></table>
<p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g17bm6ub5xj308b0600st.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">起床-&gt;吃饭: 稀饭油条</span><br><span class="line">吃饭-&gt;上班: 不要迟到了</span><br><span class="line">上班-&gt;午餐: 吃撑了</span><br><span class="line">上班-&gt;下班:</span><br><span class="line">Note right of 下班: 下班了</span><br><span class="line">下班-&gt;回家:</span><br><span class="line">Note right of 回家: 到家了</span><br><span class="line">回家--&gt;&gt;起床:</span><br><span class="line">Note left of 起床: 新的一天</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>实线</td>
</tr>
<tr>
<td>&gt;</td>
<td>实心箭头</td>
</tr>
<tr>
<td>–</td>
<td>虚线</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>空心箭头</td>
</tr>
</tbody></table>
<p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g17a4umoxxj309602ugli.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>


<h3 id="Latex数学公式"><a href="#Latex数学公式" class="headerlink" title="Latex数学公式"></a>Latex数学公式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">行内公式</span><br><span class="line">使用两个”$”符号引用公式</span><br><span class="line">$公式$</span><br><span class="line"></span><br><span class="line">行间公式</span><br><span class="line"></span><br><span class="line">使用两对“$$”符号引用公式：</span><br><span class="line">$$公式$$</span><br><span class="line"></span><br><span class="line">简单的规则：</span><br><span class="line">（1）空格：LaTeX中空格用来隔开单词(英语一类字母文字)，多个空格等效于一个空格；对中文没有作用。 </span><br><span class="line">（2）换行：用控制命令“\”,或“ \newline”. </span><br><span class="line">（3）分段：用控制命令“\par” 或空出一行。 </span><br><span class="line">（4）换页：用控制命令“\newpage”或“\clearpage” </span><br><span class="line">（5）特殊控制字符：#，$, %, &amp;, - ,&#123;, &#125;, ^, ~ </span><br><span class="line">\# \$ \% \&amp; \- \&#123; \&#125; \^&#123;&#125; \~&#123;&#125; $\backslash$表示“ \”.。</span><br></pre></td></tr></table></figure>

<p>常见数学符号</p>
<ol>
<li>指数和下标可以用^和_后加相应字符来实现。比如<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a_&#123;1&#125;$ \qquad $x^&#123;2&#125;$ \qquad</span><br><span class="line">$e^&#123;-\alpha t&#125;$ \qquad</span><br><span class="line">$a^&#123;3&#125;_&#123;ij&#125;$\\</span><br><span class="line">$e^&#123;x^2&#125; \neq &#123;e^x&#125;^2$</span><br></pre></td></tr></table></figure>
$$a_{1}$$</li>
</ol>
<p>$$x^{2}$$</p>
<p>$$e^{-\alpha t}$$ </p>
<p>$$a^{3}_{ij}$$</p>
<ol>
<li><p>平方根</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\sqrt&#123;x&#125;$$</span><br><span class="line">$$\sqrt&#123; x^&#123;2&#125;+\sqrt&#123;y&#125; &#125;$$</span><br><span class="line">$$\sqrt[3]&#123;2&#125;$$</span><br><span class="line">$$\surd[x^2 + y^2]$$</span><br></pre></td></tr></table></figure>
<p>$$\sqrt{x}$$<br>$$\sqrt{ x^{2}+\sqrt{y} }$$<br>$$\sqrt[3]{2}$$<br>$$\surd[x^2 + y^2]$$</p>
</li>
<li><p>命令<code>\overline</code> 和<code>\underline</code> 在表达式的上、下方画出水平线。比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\overline&#123;m+n&#125;$$</span><br><span class="line">$$\underline&#123;m+n&#125;$$</span><br></pre></td></tr></table></figure>
<p>$$\overline{m+n}$$<br>$$\underline{m+n}$$</p>
</li>
<li><p>命令<code>\overbrace</code> 和<code>\underbrace</code> 在表达式的上、下方给出一水平的大括号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\underbrace&#123; a+b+\cdots+z &#125;_&#123;26&#125;$$</span><br></pre></td></tr></table></figure>
<p>$$\underbrace{ a+b+\cdots+z }_{26}$$</p>
</li>
<li><p>其他<br>$\frac{1+x}{2^x}$</p>
</li>
</ol>
<p>$$\sum_{i&#x3D;0}N\int_{a}^{b}g(t,i)\text{d}t$$<br>$$\begin{matrix}<br>1&amp;0&amp;0\<br>0&amp;1&amp;0\<br>0&amp;0&amp;1\<br>\end{matrix}$$<br>$$\begin{bmatrix}<br>{a_{11}}&amp;{a_{12}}&amp;{\cdots}&amp;{a_{1n}}\<br>{a_{21}}&amp;{a_{22}}&amp;{\cdots}&amp;{a_{2n}}\<br>{\vdots}&amp;{\vdots}&amp;{\ddots}&amp;{\vdots}\<br>{a_{m1}}&amp;{a_{m2}}&amp;{\cdots}&amp;{a_{mn}}\<br>\end{bmatrix}$$<br>$$\begin{cases}<br>a_1x+b_1y+c_1z&#x3D;d_1\<br>a_2x+b_2y+c_2z&#x3D;d_2\<br>a_3x+b_3y+c_3z&#x3D;d_3\<br>\end{cases}<br>$$</p>
<p>$$\begin{aligned}<br>f_Y(y) &amp; &#x3D; f_X[h(y)]|h’(y)| \[2ex]<br>&amp; &#x3D; f_X[h(y)]h’(y) \[2ex]<br>&amp; &#x3D; \frac{1}{\theta}e^{-\frac{x}{\theta}}[\frac{dx}{dy}(-\frac{\theta}{ln(1-y)})] \[2ex]<br>&amp; &#x3D; \frac{1}{\theta}e^{-\frac{-\frac{\theta}{ln(1-y)}}{\theta}}\frac{\theta}{1-y} \[2ex]<br>&amp; &#x3D; \frac{1}{\theta}e^{ln(1-y)}\frac{\theta}{1-y} \[2ex]<br>&amp; &#x3D; \frac{1-y}{\theta}\frac{\theta}{1-y} \[2ex]<br>&amp; &#x3D; 1<br>\end{aligned}<br>$$</p>
<h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[锚点][锚点的定义]的 目标内容中不能有大写字母和空格，所以如果锚点目标的目标内容中有大写字母或空格，则需要在定义锚点中的目标内容时，</span><br><span class="line">把大写字母改成小写字母，</span><br><span class="line">把空格改成 -；</span><br><span class="line"></span><br><span class="line">[锚点][锚点的定义]的 目标内容 中不能含有以下字符：</span><br><span class="line">半角点(即英文中的句号).</span><br><span class="line"></span><br><span class="line">[回到顶部](##markdown_在hexo_中的渲染)</span><br><span class="line">[数学公式](#latex数学公式)</span><br></pre></td></tr></table></figure>
<p><a href="#markdown-%E5%9C%A8hexo-%E4%B8%AD%E7%9A%84%E6%B8%B2%E6%9F%93">回到顶部</a><br><a href="#latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">数学公式</a></p>
<h3 id="diff语法"><a href="#diff语法" class="headerlink" title="diff语法"></a>diff语法</h3><p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g17b18hbg1j303y0280si.jpg"></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ new code</span></span><br><span class="line"><span class="deletion">- old code</span></span><br></pre></td></tr></table></figure>


<h3 id="自动邮箱连接"><a href="#自动邮箱连接" class="headerlink" title="自动邮箱连接"></a>自动邮箱连接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;xxx@outlook.com&gt;</span><br></pre></td></tr></table></figure>

<p><a href="mailto:&#120;&#120;&#120;&#x40;&#111;&#117;&#116;&#x6c;&#111;&#111;&#x6b;&#x2e;&#99;&#x6f;&#109;">&#120;&#120;&#120;&#x40;&#111;&#117;&#116;&#x6c;&#111;&#111;&#x6b;&#x2e;&#99;&#x6f;&#109;</a></p>
<h3 id="脚注-2"><a href="#脚注-2" class="headerlink" title="脚注  [^2]"></a>脚注  [^2]</h3><p>代码：<br><img src="http://ww1.sinaimg.cn/large/0065saiygy1g17u5ykm67j30jf06cweo.jpg"><br>效果：<br><img src="http://ww1.sinaimg.cn/large/0065saiygy1g17u8tcrv0j30e40bc0su.jpg"></p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库入门</title>
    <url>/2019/mysql001/</url>
    <content><![CDATA[<div class="note info">
数据库基本概念、数据库模型概念、关系数据库
</div>

<span id="more"></span>

<h2 id="DBMS"><a href="#DBMS" class="headerlink" title="DBMS"></a>DBMS</h2><ol>
<li>数据定义功能</li>
<li>数据操纵功能</li>
<li>数据库的运行管理功能</li>
<li>数据组织、存储与管理功能</li>
<li>数据库的保护功能</li>
<li>数据库的维护功能</li>
<li>数据库接口功能</li>
</ol>
<h2 id="数据库模型概念"><a href="#数据库模型概念" class="headerlink" title="数据库模型概念"></a>数据库模型概念</h2><p>数据模型（Data Model）它是数据特征的抽象。数据模型是数据库系统的核心与基础，它从抽象层次上描述了系统的静态特征、动态行为和约束条件，为数据库系统的信息表示与操作提供了一个抽象的框架。</p>
<ol>
<li>数据结构：主要描述数据的类型、内容、性质以及数据间的联系等，是对系统静态特征的描述。</li>
<li>数据操作：主要描述在相应的数据结构上的操作类型和操作方式，是对系统动态特征的描述。</li>
<li>数据的约束条件：主要描述数据结构内数据间的语法、词义联系、他们之间的制约和依存关系，以及数据动态变化的规则，以保证数据的正确、有效和相容。</li>
</ol>
<blockquote>
<p>概念模型表示方法<br>概念模型的表示方法有很多，但最常用的方法为实体-联系方法（Entity-Relationship Approach），简称E-R方法<br>该方法用E-R图（Entity-Relationship Diagram，实体-联系图）来描述现实世界的概念模型，E-R方法也称为E-R模型（Entity-Relationship Model）。</p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g1olv8j6zrj30is075t8u.jpg"></p>
<blockquote>
<p>实体之间的联系：一对一、一对多、多对多</p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g1olxk5m4aj30l1079weq.jpg"></p>
<blockquote>
<p>如果联系也具有属性，则这些属性也要用无向边与该联系连接起来例如学生与课程之间存在学习的联系，学习就有“成绩”这一属性。</p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g1om088y3dj30br09cwem.jpg"></p>
<h2 id="关系数据库规范化"><a href="#关系数据库规范化" class="headerlink" title="关系数据库规范化"></a>关系数据库规范化</h2><p>范式是符合某一种级别的关系模式的集合，是衡量关系模式规范化程度的标准，符合标准的关系才是规范化的。范式可以分为多个等级：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、BC范式（BCNF）、第四范式等。</p>
<h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p>如果关系模式R中所有的属性都是不可分解的，则称该关系模式R满足第一范式（First Normal Form），简称1NF，记作R$\in$1NF。</p>
<h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><p>如果一个关系模式R$\in$1NF，且R中的每一个非主属性都完全丽数依赖于码，则称该关系模式R满足第二范式（Second Normal Form），简称2NF，记作R$\in$2NF。</p>
<blockquote>
<p>例如，学生成绩表（学号，课程号，姓名，课程名，成绩）中，<br>“学号”和“课程号”字段组成主键，“成绩”完全依赖于该主键，但是“姓名”和“课程名”都只是部分依赖于主键，<br>“姓名”可以由“学号”确定，并不需要“课程号”，而“课程名”是由“课程号”决定并不依赖于“学号”。所以该关系表就不符合2NF。</p>
<p>对于上面的这种关系，可以将其分解为三张表：<br>(1) 学生信息表（学号，姓名）<br>(2) 课程信息表（课程号，课程名）<br>(3) 成绩表（学号，课程号，成绩）</p>
</blockquote>
<h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><p>如果一个关系模式R$\in$2NF，且R中的每个非主属性都不传递函数依赖于码，则称该关系模式R满足第三范式（Third Normal Form），简称3NF，记作R$\in$3NF。<br>可以证明，若R$\in$3NF，则每一个非主属性既不部分函数依赖于码，也不传递依赖于码。</p>
<blockquote>
<p>所谓传递函数依赖是指：<br>在一个数据表中存在关键字段A决定非关键字段B，<br>而B又决定非关键字段C，则称C传递函数依赖于A，并称该表中存在传递依赖关系。</p>
</blockquote>
<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p><img src="http://ww1.sinaimg.cn/large/0065saiygy1g1omg35dt4j30qa0dqq3y.jpg"></p>
<hr />]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>范式</tag>
        <tag>关系数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基础</title>
    <url>/2019/mysql002/</url>
    <content><![CDATA[<div class="note info">
登陆、启动 MySQL
</div>
<span id="more"></span>

<h2 id="登陆-MySQL-数据库"><a href="#登陆-MySQL-数据库" class="headerlink" title="登陆 MySQL 数据库"></a>登陆 MySQL 数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h hostname -u username -p</span><br></pre></td></tr></table></figure>
<p>在上述命令中，mysql为登录命令，-h后面的参数是服务器的主机地址，-u后面的参数是登录数据库的用户名，-p后面是登录密码</p>
<h2 id="启动-MySQL-服务"><a href="#启动-MySQL-服务" class="headerlink" title="启动 MySQL 服务"></a>启动 MySQL 服务</h2><figure class="highlight bash"><figcaption><span>启动 MySQL 服务</span></figcaption><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>
<p>$$⋈ ⋉ ⋊$$</p>
<figure class="highlight bash"><figcaption><span>停止 MySQL 服务</span></figcaption><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>


<hr />]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
